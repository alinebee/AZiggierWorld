const std = @import("std");

const Program = @import("../types/program.zig");
const Opcode = @import("../types/opcode.zig");
const Machine = @import("../machine.zig");

const ActivateThread = @import("activate_thread.zig");
const ControlThreads = @import("control_threads.zig");
const SetRegister = @import("set_register.zig");
const CopyRegister = @import("copy_register.zig");
const ControlResources = @import("control_resources.zig");
const ControlMusic = @import("control_music.zig");
const ControlSound = @import("control_sound.zig");
const ConditionalJump = @import("conditional_jump.zig");

pub const Error = 
    Program.Error || 
    ActivateThread.Error || 
    ControlThreads.Error || 
    SetRegister.Error || 
    CopyRegister.Error || 
    ControlResources.Error || 
    ControlMusic.Error || 
    ControlSound.Error || 
    ConditionalJump.Error ||
    error{
    /// Bytecode contained an unrecognized opcode.
    UnsupportedOpcode,
};

/// A union type that wraps all possible bytecode instructions.
pub const Wrapped = union(enum) {
    // TODO: see if we can codegen all this because it's going to get tiresome for 26-odd opcodes.
    ActivateThread: ActivateThread.Instance,
    ControlThreads: ControlThreads.Instance,
    SetRegister: SetRegister.Instance,
    CopyRegister: CopyRegister.Instance,
    ControlResources: ControlResources.Instance,
    ControlMusic: ControlMusic.Instance,
    ControlSound: ControlSound.Instance,
    ConditionalJump: ConditionalJump.Instance,
};

/// Parse the next instruction from a bytecode program and wrap it in a Wrapped union type.
/// Returns the wrapped instruction or an error if the bytecode could not be interpreted as an instruction.
pub fn parseNextInstruction(program: *Program.Instance) Error!Wrapped {
    const raw_opcode = try program.read(Opcode.Raw);
    const opcode = Opcode.parse(raw_opcode);

    return switch (opcode) {
        .ActivateThread     => wrap("ActivateThread", ActivateThread, raw_opcode, program),
        .ControlThreads     => wrap("ControlThreads", ControlThreads, raw_opcode, program),
        .SetRegister        => wrap("SetRegister", SetRegister, raw_opcode, program),
        .CopyRegister       => wrap("CopyRegister", CopyRegister, raw_opcode, program),
        .ControlResources   => wrap("ControlResources", ControlResources, raw_opcode, program),
        .ControlMusic       => wrap("ControlMusic", ControlMusic, raw_opcode, program),
        .ControlSound       => wrap("ControlSound", ControlSound, raw_opcode, program),
        .ConditionalJump    => wrap("ConditionalJump", ConditionalJump, raw_opcode, program),
        else => error.UnsupportedOpcode,
    };
}

/// Parse an instruction of the specified type from the program,
/// and wrap it in a Wrapped union type initialized to the appropriate field.
inline fn wrap(comptime field_name: []const u8, comptime Instruction: type, raw_opcode: Opcode.Raw, program: *Program.Instance) Error!Wrapped {
    return @unionInit(Wrapped, field_name, try Instruction.parse(raw_opcode, program));
}

/// Parse and execute the next instruction from a bytecode program on the specified virtual machine.
pub fn executeNextInstruction(program: *Program.Instance, machine: *Machine.Instance) Error!void {
    const raw_opcode = try program.read(Opcode.Raw);
    const opcode = Opcode.parse(raw_opcode);

    try switch (opcode) {
        .ActivateThread     => execute(ActivateThread, raw_opcode, program, machine),
        .ControlThreads     => execute(ControlThreads, raw_opcode, program, machine),
        .SetRegister        => execute(SetRegister, raw_opcode, program, machine),
        .CopyRegister       => execute(CopyRegister, raw_opcode, program, machine),
        .ControlResources   => execute(ControlResources, raw_opcode, program, machine),
        .ControlMusic       => execute(ControlMusic, raw_opcode, program, machine),
        .ControlSound       => execute(ControlSound, raw_opcode, program, machine),
        .ConditionalJump    => execute(ConditionalJump, raw_opcode, program, machine),
        else => error.UnsupportedOpcode,
    };
}

inline fn execute(comptime Instruction: type, raw_opcode: Opcode.Raw, program: *Program.Instance, machine: *Machine.Instance) Error!void {
    const instruction = try Instruction.parse(raw_opcode, program);
    // You'd think there'd be an easier way to express "try the function if necessary, otherwise just call it".
    if (@typeInfo(@TypeOf(Instruction.Instance.execute).ReturnType) == .ErrorUnion) {
        try instruction.execute(machine);
    } else {
        instruction.execute(machine);
    }
}

// -- Test helpers --

/// Try to parse a literal sequence of bytecode into an Instruction union value.
fn debugParseInstruction(bytecode: []const u8) !Wrapped {
    var program = Program.new(bytecode);
    return try parseNextInstruction(&program);
}

/// Assert that a wrapped instruction previously generated by `parse` matches the expected union type.
/// (expectEqual won't coerce tagged unions to their underlying enum type, preventing easy comparison.)
fn expectWrappedType(expected: @TagType(Wrapped), actual: @TagType(Wrapped)) void {
    testing.expectEqual(expected, actual);
}

// -- Tests --

const testing = @import("../../utils/testing.zig");

test "parseNextInstruction returns ActivateThread instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&ActivateThread.BytecodeExamples.valid);
    expectWrappedType(.ActivateThread, instruction);
}

test "parseNextInstruction returns ControlThreads instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&ControlThreads.BytecodeExamples.valid);
    expectWrappedType(.ControlThreads, instruction);
}

test "parseNextInstruction returns SetRegister instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&SetRegister.BytecodeExamples.valid);
    expectWrappedType(.SetRegister, instruction);
}

test "parseNextInstruction returns CopyRegister instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&CopyRegister.BytecodeExamples.valid);
    expectWrappedType(.CopyRegister, instruction);
}

test "parseNextInstruction returns ControlResources instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&ControlResources.BytecodeExamples.unload_all);
    expectWrappedType(.ControlResources, instruction);
}

test "parseNextInstruction returns ControlMusic instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&ControlMusic.BytecodeExamples.play);
    expectWrappedType(.ControlMusic, instruction);
}

test "parseNextInstruction returns ControlSound instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&ControlSound.BytecodeExamples.play);
    expectWrappedType(.ControlSound, instruction);
}

test "parseNextInstruction returns ConditionalJump instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&ConditionalJump.BytecodeExamples.equal_to_register);
    expectWrappedType(.ConditionalJump, instruction);
}

test "parseNextInstruction returns UnsupportedOpcode error when it encounters an unknown opcode" {
    const bytecode = [_]u8{0xFF}; // unknown opcode
    testing.expectError(error.UnsupportedOpcode, debugParseInstruction(&bytecode));
}

test "executeNextInstruction executes arbitrary instruction on machine when given valid bytecode" {
    var program = Program.new(&SetRegister.BytecodeExamples.valid);
    var machine = Machine.new();

    try executeNextInstruction(&program, &machine);

    testing.expectEqual(-18901, machine.registers[16]);
}
