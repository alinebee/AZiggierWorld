const std = @import("std");

const program = @import("../types/program.zig");
const opcode = @import("../types/opcode.zig");

const activate_thread = @import("activate_thread.zig");
const control_threads = @import("control_threads.zig");
const set_register = @import("set_register.zig");

pub const Error = 
    program.Error || 
    activate_thread.Error || 
    control_threads.Error || 
    set_register.Error ||
    error {
    /// Bytecode contained an unrecognized opcode.
    UnsupportedOpcode,
};

/// A union type encapsulating all possible bytecode instructions.
pub const Instruction = union(enum) {
    // TODO: see if we can codegen all this because it's going to get tiresome for 26-odd opcodes.
    ActivateThread: activate_thread.Instruction,
    ControlThreads: control_threads.Instruction,
    SetRegister: set_register.Instruction,

    /// Parse the next instruction from a bytecode program.
    /// Returns a valid instruction, or an error if the bytecode is truncated or could not be interpreted as an instruction.
    pub fn parse(prog: *program.Program) Error!Instruction {
        const raw_opcode = try prog.read(opcode.RawOpcode);

        return switch (opcode.parse(raw_opcode)) {
            .ActivateThread => .{ .ActivateThread = try activate_thread.Instruction.parse(raw_opcode, prog) },
            .ControlThreads => .{ .ControlThreads = try control_threads.Instruction.parse(raw_opcode, prog) },
            .SetRegister    => .{ .SetRegister = try set_register.Instruction.parse(raw_opcode, prog) },
            else => error.UnsupportedOpcode,
        };
    }
};

// -- Test helpers --

/// Try to parse a literal sequence of bytecode into an Instruction union value.
fn debugParseInstruction(bytecode: []const u8) !Instruction {
    var prog = program.Program.init(bytecode);
    return try Instruction.parse(&prog);
}

/// Assert that an instruction previously generated by `parse` matches the expected union type.
/// (expectEqual won't coerce tagged unions to their underlying enum type, preventing easy comparison.)
fn expectInstructionType(expected: @TagType(Instruction), actual: @TagType(Instruction)) void {
    testing.expectEqual(expected, actual);
}

// -- Tests --

const testing = @import("../../utils/testing.zig");

test "parse returns ActivateThread instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&activate_thread.BytecodeExamples.valid);
    expectInstructionType(.ActivateThread, instruction);
}

test "parse returns ControlThreads instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&control_threads.BytecodeExamples.valid);
    expectInstructionType(.ControlThreads, instruction);
}

test "parse returns SetRegister instruction when given valid bytecode" {
    const instruction = try debugParseInstruction(&set_register.BytecodeExamples.valid);
    expectInstructionType(.SetRegister, instruction);
}

test "parse returns UnsupportedOpcode error when it encounters an unknown opcode" {
    const bytecode = [_]u8{ 0xFF }; // unknown opcode
    testing.expectError(error.UnsupportedOpcode, debugParseInstruction(&bytecode));
}